{"openapi": "3.0.0", "info": {"title": "Swagger Petstore - OpenAPI 3.0", "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.", "termsOfService": "http://swagger.io/terms/", "contact": {"name": "", "url": "", "email": "apiteam@swagger.io"}, "license": {"name": "Apache 2.0", "url": "http://www.apache.org/licenses/LICENSE-2.0.html"}, "version": "1.0.17"}, "servers": [{"url": "/api/v3", "description": ""}], "paths": {"/pet": {"put": {"tags": ["pet"], "summary": "Update an existing pet", "description": "Update an existing pet by Id", "operationId": "updatePet", "parameters": [], "requestBody": {"description": "Update an existent pet in the store", "required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Pet"}}, "application/xml": {"schema": {"title": "Pet", "type": "object", "properties": {"id": {"title": "Id", "example": 10, "format": "int64", "type": "integer"}, "name": {"title": "Name", "example": "Dogs", "type": "string"}, "category": {"$ref": "#/components/schemas/Category"}, "photoUrls": {"title": "Photourls", "type": "array", "items": {"type": "string", "xml": {"name": "Photourls"}}, "xml": {"wrapped": true}}, "tags": {"title": "Tags", "type": "array", "items": {"$ref": "#/components/schemas/Tag"}, "xml": {"wrapped": true}}, "status": {"description": "pet status in the store", "allOf": [{"$ref": "#/components/schemas/PetStatus"}]}}, "required": ["name", "photoUrls"], "xml": {"name": "Pet"}}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Pet"}}}}, "responses": {"200": {"description": "Successful operation|Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Pet"}}, "application/xml": {"schema": {"$ref": "#/components/schemas/Pet"}}}}, "400": {"description": "Invalid ID supplied"}, "404": {"description": "Pet not found"}, "405": {"description": "Validation exception"}}, "deprecated": false, "security": [{"petstore_auth": ["write:pets", "read:pets"]}]}, "post": {"tags": ["pet"], "summary": "Add a new pet to rhe store", "description": "Add a new pet to rhe store", "operationId": "addPet", "parameters": [], "requestBody": {"description": "", "required": false, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Pet"}}, "application/xml": {"schema": {"title": "Pet", "type": "object", "properties": {"id": {"title": "Id", "example": 10, "format": "int64", "type": "integer"}, "name": {"title": "Name", "example": "Dogs", "type": "string"}, "category": {"$ref": "#/components/schemas/Category"}, "photoUrls": {"title": "Photourls", "type": "array", "items": {"type": "string", "xml": {"name": "Photourls"}}, "xml": {"wrapped": true}}, "tags": {"title": "Tags", "type": "array", "items": {"$ref": "#/components/schemas/Tag"}, "xml": {"wrapped": true}}, "status": {"description": "pet status in the store", "allOf": [{"$ref": "#/components/schemas/PetStatus"}]}}, "required": ["name", "photoUrls"], "xml": {"name": "Pet"}}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Pet"}}}}, "responses": {"200": {"description": "Successful operation|Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Pet"}}, "application/xml": {"schema": {"$ref": "#/components/schemas/Pet"}}}}, "405": {"description": "Invalid input"}}, "deprecated": false, "security": [{"petstore_auth": ["write:pets", "read:pets"]}]}}, "/pet/findByStatus": {"get": {"tags": ["pet"], "summary": "Finds Pets by status", "description": "Multiple status values can be provided with comma separated strings", "operationId": "findPetsByStatus", "parameters": [{"description": "Status values that need to be considered for filter", "required": false, "deprecated": false, "schema": {"default": "available", "allOf": [{"$ref": "#/components/schemas/PetStatus"}]}, "explode": true, "name": "name", "in": "query"}], "responses": {"200": {"description": "Successful operation|Successful operation", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Pet"}}}, "application/xml": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Pet"}}}}}, "400": {"description": "Invalid status value"}}, "deprecated": false, "security": [{"petstore_auth": ["write:pets", "read:pets"]}]}}, "/pet/findByTags": {"get": {"tags": ["pet"], "summary": "Finds Pets by tags", "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.", "operationId": "findPetsByTags", "parameters": [{"description": "Tags to filter by", "required": false, "deprecated": false, "schema": {"type": "array", "items": {"type": "string"}}, "explode": true, "name": "tags", "in": "query"}], "responses": {"200": {"description": "Successful operation|Successful operation", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Pet"}}}, "application/xml": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Pet"}}}}}, "400": {"description": "Invalid tag value"}}, "deprecated": false, "security": [{"petstore_auth": ["write:pets", "read:pets"]}]}}, "/pet/{petId}": {"get": {"tags": ["pet"], "summary": "Find pet by ID", "description": "Returns a single pet", "operationId": "getPetById", "parameters": [{"description": "Id of pet to return", "required": true, "deprecated": false, "schema": {"format": "int64", "type": "integer"}, "explode": false, "name": "petId", "in": "path"}], "responses": {"200": {"description": "Successful operation|Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Pet"}}, "application/xml": {"schema": {"$ref": "#/components/schemas/Pet"}}}}, "400": {"description": "Invalid Id supplied"}, "404": {"description": "Pet not found"}}, "deprecated": false, "security": [{"api_key": []}, {"petstore_auth": ["write:pets", "read:pets"]}]}, "post": {"tags": ["pet"], "summary": "Updates a pet in the store with form data", "description": "", "operationId": "updatePetWithForm", "parameters": [{"description": "Id of pet that needs to be updated", "required": true, "deprecated": false, "schema": {"format": "int64", "type": "integer"}, "explode": false, "name": "petId", "in": "path"}, {"description": "Name of pet that needs to be updated", "required": true, "deprecated": false, "schema": {"type": "string"}, "explode": false, "name": "name", "in": "query"}, {"description": "Status of pet that needs to be updated", "required": true, "deprecated": false, "schema": {"type": "string"}, "explode": false, "name": "status", "in": "query"}], "responses": {"405": {"description": "Invalid input"}}, "deprecated": false, "security": [{"petstore_auth": ["write:pets", "read:pets"]}]}, "delete": {"tags": ["pet"], "summary": "Deletes a pet", "description": "", "operationId": "deletePet", "parameters": [{"description": "", "required": true, "deprecated": false, "schema": {"type": "string"}, "explode": false, "name": "api_key", "in": "header"}, {"description": "Pet id to delete", "required": true, "deprecated": false, "schema": {"format": "int64", "type": "integer"}, "explode": false, "name": "petId", "in": "path"}], "responses": {"400": {"description": "Invalid pet value"}}, "deprecated": false, "security": [{"petstore_auth": ["write:pets", "read:pets"]}]}}, "/pet/{petId}/uploadImage": {"post": {"tags": ["pet"], "summary": "uploads an image", "description": "", "operationId": "uploadId", "parameters": [{"description": "Id of pet to update", "required": true, "deprecated": false, "schema": {"format": "int64", "type": "integer"}, "explode": false, "name": "petId", "in": "path"}, {"description": "Additional Metadata", "required": true, "deprecated": false, "schema": {"type": "string"}, "explode": false, "name": "additionalMetadata", "in": "query"}], "requestBody": {"description": "", "required": false, "content": {"application/octet-stream": {"schema": {"$ref": "#/components/schemas/uploadIdBodyModel"}}}}, "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiResponse"}}}}}, "deprecated": false, "security": [{"petstore_auth": ["write:pets", "read:pets"]}]}}, "/store/inventory": {"get": {"tags": ["store"], "summary": "Returns pet inventories by status", "description": "Returns a map of status codes to quantities", "operationId": "getInventory", "parameters": [], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"type": "object", "additionalProperties": {"type": "integer", "format": "int32"}}}}}}, "deprecated": false, "security": [{"api_key": []}]}}, "/store/order": {"post": {"tags": ["store"], "summary": "Place an order for a pet", "description": "Place a new order in the store", "operationId": "placeOrder", "parameters": [], "requestBody": {"description": "", "required": false, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Order"}}, "application/xml": {"schema": {"title": "Order", "type": "object", "properties": {"id": {"title": "Id", "example": 10, "format": "int64", "type": "integer"}, "petId": {"title": "Petid", "example": 198772, "format": "int64", "type": "integer"}, "quantity": {"title": "Quantity", "example": 7, "format": "int32", "type": "integer"}, "shipDate": {"title": "Shipdate", "format": "date-time", "type": "string"}, "status": {"description": "Order Status", "allOf": [{"$ref": "#/components/schemas/Status"}]}, "complete": {"title": "Complete", "type": "boolean"}}, "xml": {"name": "Order"}}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Order"}}}}, "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Order"}}}}, "405": {"description": "Invalid input"}}, "deprecated": false}}, "/store/order/{orderId}": {"get": {"tags": ["store"], "summary": "Find purchase order by ID", "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.", "operationId": "getOrderById", "parameters": [{"description": "ID of order that needs to be fetched", "required": true, "deprecated": false, "schema": {"format": "int64", "type": "string"}, "explode": false, "name": "orderId", "in": "path"}], "responses": {"200": {"description": "Successful operation|Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Pet"}}, "application/xml": {"schema": {"$ref": "#/components/schemas/Pet"}}}}, "400": {"description": "Invalid ID supplied"}, "404": {"description": "Order not found"}}, "deprecated": false}, "delete": {"tags": ["store"], "summary": "Delete purchase order by ID", "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors", "operationId": "deleteOrder", "parameters": [{"description": "Id of the order that needs to be deleted", "required": true, "deprecated": false, "schema": {"format": "int64", "type": "string"}, "explode": false, "name": "orderId", "in": "path"}], "responses": {"400": {"description": "Invalid ID supplied"}, "404": {"description": "Order not found"}}, "deprecated": false}}, "/user": {"post": {"tags": ["user"], "summary": "Create user", "description": "This can only be done by the logged in user.", "operationId": "createUser", "parameters": [], "requestBody": {"description": "", "required": false, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}, "application/xml": {"schema": {"title": "User", "type": "object", "properties": {"id": {"title": "Id", "example": 10, "format": "int64", "type": "integer"}, "username": {"title": "Username", "example": "theUser", "type": "string"}, "firstName": {"title": "Firstname", "example": "John", "type": "string"}, "lastName": {"title": "Lastname", "example": "James", "type": "string"}, "email": {"title": "Email", "example": "john@email.com", "type": "string"}, "password": {"title": "Password", "example": "12345", "type": "string"}, "phone": {"title": "Phone", "example": "12345", "type": "string"}, "userStatus": {"title": "Userstatus", "description": "User Status", "example": 1, "format": "int32", "type": "integer"}}, "xml": {"name": "User"}}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/User"}}}}, "responses": {"default": {"description": "Successful operation|Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}, "application/xml": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "deprecated": false}}, "/user/createWithList": {"post": {"tags": ["user"], "summary": "Creates list of users with given input array", "description": "Creates list of users with given input array", "operationId": "createUsersWithListInput", "parameters": [], "requestBody": {"description": "", "required": false, "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}}, "responses": {"200": {"description": "Successful operation|Successful operation", "content": {"application/xml": {"schema": {"$ref": "#/components/schemas/User"}}, "application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "default": {"description": "successful operation"}}, "deprecated": false}}, "/user/login": {"get": {"tags": ["user"], "summary": "Logs user into the system", "description": "", "operationId": "loginUser", "parameters": [{"description": "The user name for login", "required": false, "deprecated": false, "schema": {"type": "string"}, "explode": false, "name": "username", "in": "query"}, {"description": "The password for login in clear text", "required": false, "deprecated": false, "schema": {"type": "string"}, "explode": false, "name": "password", "in": "query"}], "responses": {"200": {"description": "", "headers": {"X-Rate-Limit": {"description": "calls per hour allowed by the user", "required": false, "deprecated": false, "schema": {"format": "int32", "type": "integer"}, "explode": false}, "X-Expires-After": {"description": "date in UTC when token expires", "required": false, "deprecated": false, "schema": {"format": "date-time", "type": "string"}, "explode": false}}, "content": {"application/json": {"schema": {"type": "string"}}, "application/xml": {"schema": {"type": "string"}}}}, "400": {"description": "Invalid username/password supplied"}}, "deprecated": false}}, "/user/logout": {"get": {"tags": ["user"], "summary": "Logs out current logged in user session", "description": "", "operationId": "logoutUser", "parameters": [], "responses": {"default": {"description": "successful operation"}}, "deprecated": false}}, "/user/{username}": {"get": {"tags": ["user"], "summary": "Get user by user name", "description": "", "operationId": "getUserByName", "parameters": [{"description": "The name that needs to be fetched. Use user1 for testing. ", "required": true, "deprecated": false, "schema": {"type": "string"}, "explode": false, "name": "username", "in": "path"}], "responses": {"200": {"description": "Successful operation|Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}, "application/xml": {"schema": {"$ref": "#/components/schemas/User"}}}}, "400": {"description": "Invalid username supplied"}, "404": {"description": "User not found"}}, "deprecated": false}, "put": {"tags": ["user"], "summary": "Update user", "description": "This can only be done by the logged in user.", "operationId": "updateUser", "parameters": [{"description": "name that need to be deleted", "required": true, "deprecated": false, "schema": {"type": "string"}, "explode": false, "name": "username", "in": "path"}], "requestBody": {"description": "", "required": false, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}, "application/xml": {"schema": {"title": "User", "type": "object", "properties": {"id": {"title": "Id", "example": 10, "format": "int64", "type": "integer"}, "username": {"title": "Username", "example": "theUser", "type": "string"}, "firstName": {"title": "Firstname", "example": "John", "type": "string"}, "lastName": {"title": "Lastname", "example": "James", "type": "string"}, "email": {"title": "Email", "example": "john@email.com", "type": "string"}, "password": {"title": "Password", "example": "12345", "type": "string"}, "phone": {"title": "Phone", "example": "12345", "type": "string"}, "userStatus": {"title": "Userstatus", "description": "User Status", "example": 1, "format": "int32", "type": "integer"}}, "xml": {"name": "User"}}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/User"}}}}, "responses": {"default": {"description": "successful operation"}}, "deprecated": false}, "delete": {"tags": ["user"], "summary": "Delete user", "description": "This can only be done by the logged in user.", "operationId": "deleteUser", "parameters": [{"description": "name that need to be deleted", "required": true, "deprecated": false, "schema": {"type": "string"}, "explode": false, "name": "username", "in": "path"}], "responses": {"400": {"description": "Invalid username supplied"}, "404": {"description": "User not found"}}, "deprecated": false}}}, "tags": [{"name": "pet", "description": "Everything about your Pets", "externalDocs": {"description": "Find out more", "url": "http://swagger.io"}}, {"name": "store", "description": "Access to Petstore orders", "externalDocs": {"description": "Find out more about our store", "url": "http://swagger.io"}}, {"name": "user", "description": "Operations about user"}], "components": {"schemas": {"uploadIdBodyModel": {"title": "uploadIdBodyModel", "type": "object", "properties": {"fake": {"title": "Fake", "format": "binary", "type": "string"}}, "required": ["fake"]}, "Status": {"title": "Status", "description": "An enumeration.", "enum": ["placed", "approved", "delivered"], "type": "string"}, "Tag": {"title": "Tag", "type": "object", "properties": {"id": {"title": "Id", "format": "int64", "type": "integer"}, "name": {"title": "Name", "type": "string"}}}, "Category": {"title": "Category", "type": "object", "properties": {"id": {"title": "Id", "example": 1, "format": "int64", "type": "integer"}, "name": {"title": "Name", "example": "Dogs", "type": "string"}}, "xml": {"name": "Category"}}, "Order": {"title": "Order", "type": "object", "properties": {"id": {"title": "Id", "example": 10, "format": "int64", "type": "integer"}, "petId": {"title": "Petid", "example": 198772, "format": "int64", "type": "integer"}, "quantity": {"title": "Quantity", "example": 7, "format": "int32", "type": "integer"}, "shipDate": {"title": "Shipdate", "format": "date-time", "type": "string"}, "status": {"description": "Order Status", "allOf": [{"$ref": "#/components/schemas/Status"}]}, "complete": {"title": "Complete", "type": "boolean"}}, "xml": {"name": "Order"}}, "PetStatus": {"title": "PetStatus", "description": "An enumeration.", "enum": ["available", "pending", "sold"], "type": "string"}, "ApiResponse": {"title": "ApiResponse", "type": "object", "properties": {"code": {"title": "Code", "format": "int32", "type": "integer"}, "type": {"title": "Type", "type": "string"}, "message": {"title": "Message", "type": "string"}}}, "User": {"title": "User", "type": "object", "properties": {"id": {"title": "Id", "example": 10, "format": "int64", "type": "integer"}, "username": {"title": "Username", "example": "theUser", "type": "string"}, "firstName": {"title": "Firstname", "example": "John", "type": "string"}, "lastName": {"title": "Lastname", "example": "James", "type": "string"}, "email": {"title": "Email", "example": "john@email.com", "type": "string"}, "password": {"title": "Password", "example": "12345", "type": "string"}, "phone": {"title": "Phone", "example": "12345", "type": "string"}, "userStatus": {"title": "Userstatus", "description": "User Status", "example": 1, "format": "int32", "type": "integer"}}, "xml": {"name": "User"}}, "Pet": {"title": "Pet", "type": "object", "properties": {"id": {"title": "Id", "example": 10, "format": "int64", "type": "integer"}, "name": {"title": "Name", "example": "Dogs", "type": "string"}, "category": {"$ref": "#/components/schemas/Category"}, "photoUrls": {"title": "Photourls", "type": "array", "items": {"type": "string", "xml": {"name": "Photourls"}}, "xml": {"wrapped": true}}, "tags": {"title": "Tags", "type": "array", "items": {"$ref": "#/components/schemas/Tag"}, "xml": {"wrapped": true}}, "status": {"description": "pet status in the store", "allOf": [{"$ref": "#/components/schemas/PetStatus"}]}}, "required": ["name", "photoUrls"], "xml": {"name": "Pet"}}}, "securitySchemes": {"petstore_auth": {"type": "oauth2", "description": "", "flows": {"implicit": {"authorizationUrl": "https://petstore3.swagger.io/oauth/authorize", "scopes": {"write:pets": "modify pets in your account", "read:pets": "read your pets"}}}}, "api_key": {"type": "apiKey", "description": "", "name": "api_key", "in": "header"}}}, "externalDocs": {"description": "Find out more about Swagger", "url": "http://swagger.io"}}
